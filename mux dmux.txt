MUX(4 :1)
library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity mux_4to1 is
 port(

     A,B,C,D : in STD_LOGIC;
     S0,S1: in STD_LOGIC;
     Z: out STD_LOGIC
  );
end mux_4to1;

architecture bhv of mux_4to1 is
begin
process (A,B,C,D,S0,S1) is
begin
  if (S0 ='0' and S1 = '0') then
      Z <= A;
  elsif (S0 ='1' and S1 = '0') then
      Z <= B;
  elsif (S0 ='0' and S1 = '1') then
      Z <= C;
  else
      Z <= D;
  end if;

end process;
end bhv;
------------------------------------------------------------------------------------------------------------------------------------------
MUX(8 :1)
library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity mux_8to1 is
 port(

     A,B,C,D,E,F,G,H : in STD_LOGIC;
     S0,S1,eN: in STD_LOGIC;
     Z: out STD_LOGIC
  );
end mux_8to1;

architecture bhv of mux_8to1 is
begin
process (A,B,C,D,E,F,G,H,eN,S0,S1) is
begin
if eN='0' then  
  if (S0 ='0' and S1 = '0') then
      Z <= A;
  elsif (S0 ='1' and S1 = '0') then
      Z <= B;
  elsif (S0 ='0' and S1 = '1') then
      Z <= C;
  else
      Z <= D;
  end if;
else  
  if (S0 ='0' and S1 = '0') then
      Z <= E;
  elsif (S0 ='1' and S1 = '0') then
      Z <= F;
  elsif (S0 ='0' and S1 = '1') then
      Z <= G;
  else
      Z <= H;
  end if;
end if;

end process;
end bhv;
------------------------------------------------------------------------------------------------------------------------------------------
DMUX(4 :1)
library IEEE;
library IEEE;
use IEEE.STD_LOGIC_1164.all;
 
entity demux_1to4 is
 port(
 
 F : in STD_LOGIC;
 S0,S1: in STD_LOGIC;
 A,B,C,D: out STD_LOGIC
 );
end demux_1to4;
 
architecture bhv of demux_1to4 is
begin
process (F,S0,S1) is
begin
 if (S0 ='0' and S1 = '0') then
 A <= F;
 elsif (S0 ='1' and S1 = '0') then
 B <= F;
 elsif (S0 ='0' and S1 = '1') then
 C <= F;
 else
 D <= F;
 end if;
 
end process;
end bhv;
------------------------------------------------------------------------------------------------------------------------------------------
DMUX(8 :1)
library IEEE;
library IEEE;
use IEEE.STD_LOGIC_1164.all;
 
entity demux_1to8 is
 port(
 
 z : in STD_LOGIC;
 S0,S1,eN: in STD_LOGIC;
 A,B,C,D,E,F,G,H: out STD_LOGIC
 );
end demux_1to8;
 
architecture bhv of demux_1to8 is
begin
process (z,S0,S1, eN) is
begin
if(eN='0') then
 if (S0 ='0' and S1 = '0') then
 A <= z;
 elsif (S0 ='1' and S1 = '0') then
 B <= z;
 elsif (S0 ='0' and S1 = '1') then
 C <= z;
 else
 D <= z;
 end if;
else
 if (S0 ='0' and S1 = '0') then
 E <= z;
 elsif (S0 ='1' and S1 = '0') then
 F <= z;
 elsif (S0 ='0' and S1 = '1') then
 G <= z;
 else
 H <= z;
 end if;
end if;
 
end process;
end bhv;
------------------------------------------------------------------------------------------------------------------------------------------
DMUX(16 :1)
library IEEE;
library IEEE;
use IEEE.STD_LOGIC_1164.all;
 
entity demux_1to16 is
 port(
 
 z : out STD_LOGIC;
 S0,S1,S2,S3: out STD_LOGIC;
 A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P: in STD_LOGIC
 );
end demux_1to16;
 
architecture bhv of demux_1to16 is
begin
process (z,S0,S1,S2,S3) is
begin
if(S3='0') then
if(S2='0') then
 if (S0 ='0' and S1 = '0') then
 A <= z;
 elsif (S0 ='1' and S1 = '0') then
 B <= z;
 elsif (S0 ='0' and S1 = '1') then
 C <= z;
 else
 D <= z;
 end if;
else
 if (S0 ='0' and S1 = '0') then
 E <= z;
 elsif (S0 ='1' and S1 = '0') then
 F <= z;
 elsif (S0 ='0' and S1 = '1') then
 G <= z;
 else
 H <= z;
 end if;
end if;
else
if(S2='0') then
 if (S0 ='0' and S1 = '0') then
 I <= z;
 elsif (S0 ='1' and S1 = '0') then
 J <= z;
 elsif (S0 ='0' and S1 = '1') then
 K <= z;
 else
 L <= z;
 end if;
else
 if (S0 ='0' and S1 = '0') then
 M <= z;
 elsif (S0 ='1' and S1 = '0') then
 N <= z;
 elsif (S0 ='0' and S1 = '1') then
 O <= z;
 else
 P <= z;
 end if;
end if;
end if; 
end process;
end bhv;

------------------------------------------------------------------------------------------------------------------------------------------
MUX(1 :16)
library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity mux_16to1 is
 port(

     A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P : in STD_LOGIC;
     S0,S1,S2,S3: in STD_LOGIC;
     Z: out STD_LOGIC
  );
end mux_16to1;

architecture bhv of mux_16to1 is
begin
process (A,B,C,D,E,F,G,H,S0,S1,S2,S3) is
begin
if S3='0' then
if S2='0' then  
  if (S0 ='0' and S1 = '0') then
      Z <= A;
  elsif (S0 ='1' and S1 = '0') then
      Z <= B;
  elsif (S0 ='0' and S1 = '1') then
      Z <= C;
  else
      Z <= D;
  end if;
else  
  if (S0 ='0' and S1 = '0') then
      Z <= E;
  elsif (S0 ='1' and S1 = '0') then
      Z <= F;
  elsif (S0 ='0' and S1 = '1') then
      Z <= G;
  else
      Z <= H;
  end if;
end if;
else
  if S2='0' then  
  if (S0 ='0' and S1 = '0') then
      Z <= I;
  elsif (S0 ='1' and S1 = '0') then
      Z <= J;
  elsif (S0 ='0' and S1 = '1') then
      Z <= K;
  else
      Z <= L;
  end if;
else  
  if (S0 ='0' and S1 = '0') then
      Z <= M;
  elsif (S0 ='1' and S1 = '0') then
      Z <= N;
  elsif (S0 ='0' and S1 = '1') then
      Z <= O;
  else
      Z <= P;
  end if;
end if;
end if;
end process;
end bhv;
